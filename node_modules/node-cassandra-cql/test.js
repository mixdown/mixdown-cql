var util = require('util');
var async = require('async');
/*
- OK: Connect to keyspace
- OK: Connection pooling and Multiple servers
- OK: Params in queries
- OK: Frame to reader / writer
- OK: Authentication
- OK: Typed rows
- OK: Int64 put
- OK: Int64
- OK: List/Map/Set parsing
- OK: List/Map/Set manipulation
- OK: StreamIds
- OK: Get value by column name
- OK: Check for comments
- OK: Check for console.log console.error

--- After first upload
- Decimal (Variable-precision decimal)
- Timeout
- Pull requests wellcome
- Acknologdement

--- After publish
- prepared queries
- Compression
- OK: Max simultaneous (amount of stream ids?)
*/

var Connection = require('./index.js').Connection;
var Client = require('./index.js').Client;
var types = require('./lib/types.js');


var client = new Client({hosts: ['localhost:9042'], username:'cassandra', password:'cassandra', keySpace:'samplekp', maxRequests: 100});
client.on('log', function (type, message, err) {
  console.log('----emitted log: ', type, message);
  if (err) {
    console.log(err);
  }
});
client.connections.forEach(function(c){
  c.on('log', function (type, message) {
    console.log('----------- con emitted log: ', type, message);
  });
});
if (true){
  async.times(1, function(n, next){
    //setTimeout(function(){
      client.execute('select * from unittestkp1_error_reports.filters LIMIT 300;', null, function (err, result) {
        if (err) {
          console.error('----------' + err);
          //client.shutdown();
        }
        else{
          if (result.rows.length > 0) {
            console.log('----------callbacked caller (' + n + ' time): ' + result.rows[0].get('id'));
          }
          else {
            console.log('----------callbacked caller');
          }
        }
        next();
      });
    //}, 1000*n);
  }, function (err){
    if (err) {
      console.error(err);
    }
    //client.shutdown(function(){
    //  console.log('async finished');
    //});
  });
  
  /*setTimeout(function(){
    client.connections[1].options.port = 9042;
  }, 3000);*/
return;
}
var connection = new Connection({host:'localhost', port:9042, username:'cassandra', password:'cassandra', maxRequests: 128});
connection.on('log', function(type, message, context){
  console.log(type, message);
});
connection.open(function(err) {
    if(err) {
        console.log('open connection err', err);
        connection.close();
    }
    else {
      //var query = 'SELECT * from samplekp.users;';
      var query = 'select * from unittestkp1_error_reports.filters LIMIT 300;';
      console.log(query);
      var maxQueries = 200;
      var args = [];
      //connection.netClient.pause();
      for (var i=0;i<maxQueries;i++) {
        //setTimeout(function(){
        connection.execute(query, args, function(err, result){queryCallback(err, result, query, args, maxQueries);});
        //}, 0 * i);
      }
      //setTimeout(function(){connection.netClient.resume();}, 3000);
    }
});
/*
setTimeout(function(){
  connection.netClient.end();
}, 2000);
*/
var counter = 0;
function queryCallback(err, result, query, args, maxQueries) {
	counter++;
	if(err) {
		console.error('ERROR', err);
	} else {
		console.log("Success: " + util.inspect(result.meta.columns[4].type));
	}
	console.log("counter : " + counter);
	if (counter === maxQueries) {
		connection.close();
	}
  else {
    //connection.execute(query, args, function(err, result){queryCallback(err, result, query, maxQueries);});
  }
}
//