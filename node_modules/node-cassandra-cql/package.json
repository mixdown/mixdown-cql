{
  "author": {
    "name": "Jorge Bay",
    "email": "jorgebaygondra@gmail.com"
  },
  "name": "node-cassandra-cql",
  "version": "0.1.5",
  "description": "Node.js driver for Cassandra CQL3 binary protocol",
  "keywords": [
    "cassandra",
    "cql",
    "cql3"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jorgebay/node-cassandra-cql/raw/master/LICENSE.txt"
    }
  ],
  "dependencies": {
    "async": ">= 0.1.12",
    "node-int64": ">= 0.3.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jorgebay/node-cassandra-cql.git"
  },
  "bugs": {
    "url": "https://github.com/jorgebay/node-cassandra-cql/issues"
  },
  "readme": "# node-cassandra-cql\n\nnode-cassandra-cql is a [Node.js](http://nodejs.org) CQL driver for [Apache Cassandra CQL3 binary protocol](https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=blob_plain;f=doc/native_protocol.spec;hb=refs/heads/cassandra-1.2).\n\nCQL is a query language for [Apache Cassandra](http://cassandra.apache.org).\n\n\n## Installation\n\n    $ npm install node-cassandra-cql\n\n## Features\n- Connection pooling to multiple hosts\n- Parameters in queries (even for sets/lists/maps collections).\n- Get cell by column name: `row.get('first_name')`\n- Bigints (using [node-int64](https://github.com/broofa/node-int64))\n\n## Using it\n```javascript\n// Creating a new connection pool to multiple hosts.\nvar Client = require('node-cassandra-cql').Client;\nvar hosts = ['host1:9042', 'host2:9042', 'host3', 'host4'];\nvar cqlClient = new Client({hosts: hosts, keyspace: 'Keyspace1'});\n```\nClient() accepts an objects with these slots:\n\n         hosts : String list in host:port format. Port is optional (defaults to 9042).\n      keyspace : Name of keyspace to use.\n      username : User for authentication (optional).\n      password : Password for authentication (optional).\n       version : Currently only '3.0.0' is supported (optional).\n     staleTime : Time in milliseconds before trying to reconnect(optional).\n\nQueries are performed using the `execute()`. For example:\n```javascript\n// Reading\ncqlClient.execute('SELECT key, email, last_name FROM user_profiles WHERE key=?', ['jbay'],\n  function(err, result) {\n    if (err) console.log('execute failed');\n    else console.log('got user profile with email ' + result.rows[0].get('email'));\n  }\n);\n\n// Writing\ncqlClient.execute('UPDATE user_profiles SET email=? WHERE key=?', ['my@email.com', 'jbay'], \n  types.consistencies.quorum,\n  function(err) {\n    if (err) console.log(\"failure\");\n    else console.log(\"success\");\n  }\n);\n```\n`execute()` accepts the following arguments\n\n        cqlQuery : The cql query to execute, with ? as parameters\n        arguments: Array of arguments that will replace the ? placeholders, can be null.\n     consistency : The level of consistency.\n        callback : The callback function with 2 arguments: err and result\n\nWhen you are finished with a `Client` instance, call `shutdown(callback)`.\nShutting down the pool prevents further work from being enqueued, and closes all\nopen connections after pending requests are complete.\n\n```javascript\n// Shutting down a pool\ncqlClient.shutdown(function() { console.log(\"connection pool shutdown\"); });\n```\n\n### Connections\nThe `Client` maintains a pool of opened connections to the hosts to avoid several time-consuming steps that are involed with the set up of a CQL binary protocol connection (socket connection, startup message, authentication, ...).\n\nIf you want to get lower level fine-grained control you could use the `Connection` class.\n```javascript\nvar Connection = require('node-cassandra-cql').Connection;\nvar con = new Connection({host:'host1', port:9042, username:'cassandra', password:'cassandra'});\ncon.open(function(err) {\n  if(err) {\n    console.error(err);\n  }\n  else {\n    var query = 'SELECT key, email, last_name FROM user_profiles WHERE key=?';\n    con.execute(query, ['jbay'], function(err, result){\n      if (err) console.log('execute failed');\n      else console.log('got user profile with email ' + result.rows[0].get('email'));\n      con.close();\n    });\n  }\n});\n```\n\n### Logging\n\nInstances of `Client()` and `Connection()` are `EventEmitter`'s and emit `log` events:\n```javascript\nvar Connection = require('node-cassandra-cql').Connection;\nvar con = new Connection({host:'host1', port:9042, keyspace:'Keyspace1', username:'user', password:'password'});\ncon.on('log', function(level, message) {\n  console.log('log event: %s -- %j', level, message);\n});\n```\nThe `level` being passed to the listener can be `info` or `error`.\n\n### Data types\n\nCassandra's bigint data types are parsed as [int64](https://github.com/broofa/node-int64).\n\nList / Set datatypes are encoded from / decoded to Javascript Arrays.\n\nMap datatype are encoded from / decoded to Javascript objects with keys as props.\n\nDecimal and timeuuid are not parsed yet, they are yielded as byte Buffers.\n\n\n## License\n\nnode-cassandra-cql is distributed under the [MIT license](http://opensource.org/licenses/MIT).\n\n## Contributions\n\nFeel free to join in if you feel like helping this project progress!\n\n## Acknowledgements\n\nFrameReader and FrameWriter are based on [node-cql3](https://github.com/isaacbwagner/node-cql3)'s FrameBuilder and FrameParser.\n",
  "readmeFilename": "README.md",
  "_id": "node-cassandra-cql@0.1.5",
  "_from": "node-cassandra-cql@0.1.x"
}
