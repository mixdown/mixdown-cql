{
  "name": "node-pipeline",
  "version": "0.5.0",
  "main": "index",
  "description": "Simple module to performing asynchronous inter-dependent series operations in node.  Unlike other more complicated approaches, this is pure javascript and very small (~100 lines of code with comments).",
  "keywords": [
    "node",
    "pipeline",
    "async",
    "series",
    "execution"
  ],
  "author": {
    "name": "Tommy Messbauer",
    "email": "tom.messbauer@gmail.com",
    "url": "http://www.vast.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:tommydudebreaux/node-pipeline.git"
  },
  "directories": {
    "tests": "tests"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "test": "node tests/api.js"
  },
  "dependencies": {
    "lodash": "1.2.1"
  },
  "devDependencies": {
    "optimist": "*",
    "tap": "*"
  },
  "optionalDependencies": {},
  "homepage": "http://vastdevblog.vast.com/",
  "readme": "pipeline\n========\n\nNode.js module for simplifying and sequencing a number of dependent functions and callbacks.\n\nSimple module to performing asynchronous inter-dependent series operations in node.  Unlike other more complicated approaches, this is pure javascript and very small (~100 lines of code with comments).\n\n# Install\n```\nnpm install node-pipeline\n```\n\n# Simple example for calculating gratuity\nThis example is in the tests folder.  It is basic and does not fully test all error conditions, but it is a good way to get the hang of the module.\n\n``` javascript\nvar pipeline = require('node-pipeline'),\n\tpl = pipeline.create(\"Tax and Gratuity Calculator\");\n\npl.on('end', function(err, results) {\n\tif (err) {\n\t\tconsole.log('Error in pipeline: ' + err);\n\t}\n\n\tconsole.log(\"Raw results\" + JSON.stringify(results, 2) );\n\tprocess.exit();\n});\n\n\npl.use(function(results, next) {\n\tvar price = Number(results[0].price),\n\t\ttaxrate = Number(results[0].taxrate);\n\n\tnext(null, { tax : price * taxrate });\n});\n\n\npl.use(function(results, next) {\n\tvar price = Number(results[0].price),\n\t\ttax = Number(results[1].tax),\n\t\tgratuityrate = Number(results[0].gratuityrate);\n\n\tnext(null, { gratuity : (price + tax) * gratuityrate }) \n});\n\n\npl.execute({\n\tcurrency: \"USD\",\n\tsymbol: \"$\",\n\tprice: argv.price || 0,\n\ttaxrate: argv.tax || 0.0825,\n\tgratuityrate: argv.gratuity || \"0.25\"\n});\n```",
  "readmeFilename": "README.md",
  "_id": "node-pipeline@0.5.0",
  "_from": "node-pipeline@*"
}
